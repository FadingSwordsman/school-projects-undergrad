package com.putable.siteriter;import static org.junit.Assert.assertEquals;import static org.junit.Assert.assertTrue;import java.io.StringReader;import java.util.HashMap;import java.util.Random;import org.junit.Before;import org.junit.Rule;import org.junit.Test;import org.junit.rules.ExpectedException;import com.putable.siteriter.locd011.SDLParserImpl;public class SDLParserImplTest{    private SDLParser underTest;    private HashMap<String, Integer> defaultURLs;    private String[] urls = new String[] { "/test0", "/test1", "/test2", "/test3", "/test4", "/test5", "/test6", "/test7", "/test8", "/test9", "/test10",	    "/test11", "/test12", "/test13", "/test14", "/test15", "/test16", "/test17", "/test18", "/test19", "/test20" };    // We don't normally expect exceptions to be thrown, usually    @Rule    public ExpectedException thrown = ExpectedException.none();    @Before    public void setUp()    {	underTest = new SDLParserImpl();	defaultURLs = new HashMap<String, Integer>();	Random r = new Random();	for (int i = 0; i < urls.length; i++)	    defaultURLs.put(urls[i], r.nextInt());    }    /**     *      * Check to make sure basic generation is working (C.3.1.1)     *      * @throws Exception     */    @Test    public void basicTest1() throws Exception    {	load("s = \"test\";");	testSites("test");    }    /**     * Test for using a name that isn't in our symbol table     */    public void nonNameTest1() throws Exception    {	load("start = a;");	testSites("a?");    }    /**     * Test for using a name that isn't in our symbol table, in the context of     * other actions     */    public void nonNameTest2() throws Exception    {	load("start = \'1\' next | \'2\' next | \'3\' next | \'4\' next | \'5\' next | \'6\' next;" + "next = \'7\' a | \'8\' a | \'9\' a | \'0\' a;");	testSites("\\d\\da?");    }    /**     *      * Check to make sure the or operator is working (C.3.1.2)     *      * @throws Exception     */    @Test    public void orTest() throws Exception    {	load("s = \"Choice \" n | \"Choice 0\"; n = \"1\"|\"2\"|\"3\"|\"4\";");	testSites("Choice [0-4]");    }    /**     *      * Check to make sure the pages are generated in a consistent manner (C.3.3)     *      * @throws Exception     */    @Test    public void consistencyCheck() throws Exception    {	// Try to create something that will generate a few different pages	String grammarDefinition = "s=\"a\"|\"aa\"n|\"aaa\"m; n=\"b\"s m|\"cc\"s; m=\"lx\"s|\"qu\";";	load(grammarDefinition);	String pages[] = new String[urls.length];	for (int x = 0; x < urls.length; x++)	    pages[x] = underTest.makePage(urls[x], defaultURLs);	for (int x = 0; x < urls.length; x++)	    assertEquals(pages[x], underTest.makePage(urls[x], defaultURLs));	// Reload the sites, and check to see that the PRNG is working correctly	underTest.load(new StringReader(grammarDefinition));	for (int x = 0; x < urls.length; x++)	    assertEquals(pages[x], underTest.makePage(urls[x], defaultURLs));    }    /**     *      * Test the non-first start string (C.3.3.5.2)     *      * @throws Exception     */    @Test    public void startStringTest() throws Exception    {	String matches = "1[ab]";	load("start = \"a\" | \"b\"; :secondaryStart = \'1\' start;");	defaultURLs = new HashMap<String, Integer>();	String[] urls = new String[] { "/ss/secondaryStart/", "/ss/secondaryStart/test1", "/ss/secondaryStart/test2", "/ss/secondaryStart/test3",		"/ss/secondaryStart/test4" };	for (int x = 0; x < urls.length; x++)	    defaultURLs.put(urls[x], x);	testSites(matches);    }    /**     * Test an incomplete alternate start string     *      * @throws Exception     */    @Test    public void badStartStringTest() throws Exception    {	String matches = "[ab]";	load("start = \"a\" | \"b\"; :secondaryStart = \'1\' start;");	defaultURLs = new HashMap<String, Integer>();	String[] urls = new String[] { "/ss/secondaryStart" };	for (int x = 0; x < urls.length; x++)	    defaultURLs.put(urls[x], x);	testSites(matches);    }    /**     * Test a non-marked start string     *      * @throws Exception     */    @Test    public void fakeStartStringTest() throws Exception    {	String matches = "[ab]1";	load("start = \"a\" end | \"b\" end;" + "end = \'1\';");	defaultURLs = new HashMap<String, Integer>();	Random r = new Random();	for (int x = 0; x < urls.length; x++)	    defaultURLs.put("/ss/end/" + x, r.nextInt());	testSites(matches);    }    /**     * Test an empty start string     *      * @throws Exception     */    @Test    public void emptyStartStringTest() throws Exception    {	String matches = "[ab]1";	load("start = \"a\" end | \"b\" end;" + "end = \'1\';");	defaultURLs = new HashMap<String, Integer>();	Random r = new Random();	for (int x = 0; x < urls.length; x++)	    defaultURLs.put("/ss/junk/" + x, r.nextInt());	testSites(matches);    }    /**     *      * Test simple use of selectors     *      * @throws Exception     */    public void selectorTest() throws Exception    {	String matches = "1a|2b";	load("first:s = \"1\" sec | \"2\" sec; sec:s = \"a\" | \"b\";");	testSites(matches);    }    /**     * Test to make sure selectors can be different sizes     *      * @throws Exception     */    @Test    public void mismatchedSelectorTest() throws Exception    {	String matches = "12Bucklemyshoe|catch22|1234|The22";	load("s:g = \'12\' n | n \'22\'; n:g = \"Bucklemyshoe\" | \"catch\" | \"34\" | \"The\"; ");	testSites(matches);    }    /**     *      * Test the use of a selector with no matching pair     *      * @throws Exception     */    @Test    public void loneSelectorTest() throws Exception    {	String matches = "[12]";	load("start:g = \"1\"|\"2\";");	testSites(matches);    }    /**     * Check to make sure blank variables are correctly evaluated     *      * @throws Exception     */    public void blankTest() throws Exception    {	String matches = "";	load("start = ;");	testSites(matches);    }    /**     * Check to make sure symbols are redefined correctly     *      * @throws Exception     */    @Test    public void redefineSymbolTest() throws Exception    {	String matches = "Done";	load("s = stuff; stuff = \"Need more time!\"; s = \"Done\";");	testSites(matches);    }    /**     * Test for blank choices     *      * @throws Exception     */    @Test    public void emptyChoiceTest() throws Exception    {	String matches = "";	load("start = |;");	testSites(matches);    }    /**     *      * Test for whitespace sensitivity (C.8.1.2)     *      * @throws Exception     */    @Test    public void whitespaceTest1() throws Exception    {	String matches = "a |b\t";	load("s = \"a \" \t| \nm\t\n; m = \n\t\"b\t\"\n|\t s \n \t\n;");	testSites(matches);    }    /**     *      * Test to ensure the appropriate exception is thrown in an invalid grammar     * (SDLParse javadoc)     *      * @throws Exception     */    @Test    public void invalidGrammar() throws Exception    {	thrown.expect(SDLParseException.class);	underTest.load(new StringReader("s = "));    }    /**     *      * Test to ensure parsing fails without a trailing semicolon     *      * @throws Exception     */    @Test    public void invalidGrammar1() throws Exception    {	thrown.expect(SDLParseException.class);	underTest.load(new StringReader("s = \"test\""));    }    /**     *      * Test to ensure parsing fails with junk following the semicolon     *      * @throws Exception     */    @Test    public void invalidGrammar2() throws Exception    {	thrown.expect(SDLParseException.class);	underTest.load(new StringReader("s = \"test\"; \"junk\""));    }        /**     *      * Test to ensure parsing fails with a missing, expected selector     *      * @throws Exception     */    @Test    public void invalidGrammar3() throws Exception    {	thrown.expect(SDLParseException.class);	underTest.load(new StringReader("s: = \"test\";"));    }        /**     *      * Test to ensure parsing fails with two selectors     *      * @throws Exception     */    @Test    public void invalidGrammar4() throws Exception    {	thrown.expect(SDLParseException.class);	underTest.load(new StringReader("s:something:else = \"test\";"));    }        /**     *      * Test to ensure parsing fails with two start string markers     *      * @throws Exception     */    @Test    public void invalidGrammar5() throws Exception    {	thrown.expect(SDLParseException.class);	underTest.load(new StringReader(":    :s = \"test\";"));    }    /**     * If there are no symbols, it should be an empty string. C.3.4.1     *      * @throws Exception     */    @Test    public void generateBeforeLoadTest() throws Exception    {	thrown.expect(IllegalStateException.class);	underTest.makePage("WhywouldIwanttoloadfirst", defaultURLs);    }        /**     * null keys should not be allowed     * @throws Exception     */    @Test    public void nullArgTest1() throws Exception    {	thrown.expect(NullPointerException.class);	underTest.load(new StringReader("s=;"));	underTest.makePage(null, new HashMap<String, Integer>());    }        /**     * null selector Maps should not be allowed     *      * @throws Exception     */    @Test    public void nullArgTest2() throws Exception    {	thrown.expect(NullPointerException.class);	underTest.load(new StringReader("s=;"));	underTest.makePage("", null);    }    private void testSites(String expectedRegex)    {	for (String url : defaultURLs.keySet())	{	    String page = underTest.makePage(url, defaultURLs);	    assertTrue(page.matches(expectedRegex));	}    }    private void load(String definition) throws Exception    {	underTest.load(new StringReader(definition));    }}